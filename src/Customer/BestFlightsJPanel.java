/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Customer;

import Business.Airplane;
import Business.TravelAgency;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;

import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author jhsnehashree
 */
public class BestFlightsJPanel extends javax.swing.JPanel {
 private JPanel jPanelBody ;
 private TravelAgency travelAgencyObj;
 DefaultTableModel dtm;
 private ArrayList<Airplane> searchResultList;
 
    /**
     * Creates new form BestFlightsJPanels
     */
   

    BestFlightsJPanel(JPanel jPanelBody, TravelAgency travelAgencyObj) {
       initComponents();
         setBounds(10, 10, 400, 300);
        setSize(3500, 3360);
         this.jPanelBody=jPanelBody;
         this.travelAgencyObj=travelAgencyObj;
    
         populateTable();
       
    }
public void populateTable()
{
     dtm =(DefaultTableModel) jTableSearchManage.getModel();
     dtm.setRowCount(0);
    
    for(Airplane airplaneslst:travelAgencyObj.getAirplaneCompany())
    {
        Object[] row=new Object[14];
        row[0]=airplaneslst;
        row[1]=airplaneslst.getAirlinerName();
        row[2]=airplaneslst.getSourcePlace();
        row[3]=airplaneslst.getDestinationPlace();
        row[4]=airplaneslst.getStartDate();
        row[5]=airplaneslst.getEndDate();
        row[6]=airplaneslst.getTotalSeatsAvailable();
        row[7]=airplaneslst.getWindowTotal();
        row[8]=airplaneslst.getAisleTotal();
        row[9]=airplaneslst.getMiddleTotal();
        row[10]=airplaneslst.getWindowPrice();
        row[11]=airplaneslst.getAislePrice();
        row[12]=airplaneslst.getMiddlePrice();
        row[13]=airplaneslst.getRatings();
       
       
        dtm.addRow(row);
    }
}
   public void bestFlightTable() {
       jTableSearchManage.setBackground(Color.GREEN);
        dtm = (DefaultTableModel) jTableSearchManage.getModel();
        dtm.setRowCount(0);
        for (Airplane airplaneslst : searchResultList) {
            Object[] row=new Object[14];
        row[0]=airplaneslst;
        row[1]=airplaneslst.getAirlinerName();
        row[2]=airplaneslst.getSourcePlace();
        row[3]=airplaneslst.getDestinationPlace();
        row[4]=airplaneslst.getStartDate();
        row[5]=airplaneslst.getEndDate();
        row[6]=airplaneslst.getTotalSeatsAvailable();
        row[7]=airplaneslst.getWindowTotal();
        row[8]=airplaneslst.getAisleTotal();
        row[9]=airplaneslst.getMiddleTotal();
        row[10]=airplaneslst.getWindowPrice();
        row[11]=airplaneslst.getAislePrice();
        row[12]=airplaneslst.getMiddlePrice();
        row[13]=airplaneslst.getRatings();
        dtm.addRow(row);
       
        
        }
        jTableSearchManage.getTableHeader().repaint();
    }
    public void oneBestFlightTable() {
       jTableSearchManage.setBackground(Color.yellow);
        dtm = (DefaultTableModel) jTableSearchManage.getModel();
        dtm.setRowCount(0);
        for (Airplane airplaneslst : searchResultList) {
           Object[] row=new Object[14];
        row[0]=airplaneslst;
        row[1]=airplaneslst.getAirlinerName();
        row[2]=airplaneslst.getSourcePlace();
        row[3]=airplaneslst.getDestinationPlace();
        row[4]=airplaneslst.getStartDate();
        row[5]=airplaneslst.getEndDate();
        row[6]=airplaneslst.getTotalSeatsAvailable();
        row[7]=airplaneslst.getWindowTotal();
        row[8]=airplaneslst.getAisleTotal();
        row[9]=airplaneslst.getMiddleTotal();
        row[10]=airplaneslst.getWindowPrice();
        row[11]=airplaneslst.getAislePrice();
        row[12]=airplaneslst.getMiddlePrice();
        row[13]=airplaneslst.getRatings();
        dtm.addRow(row);
        break;
       
        
        }
        jTableSearchManage.getTableHeader().repaint();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSearchManage = new javax.swing.JTable();
        jButtonOneBest = new javax.swing.JButton();
        jButtonOrderlyBest = new javax.swing.JButton();
        jTextFieldBestFlightFrom = new javax.swing.JTextField();
        jTextFieldBestFlightTo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonNextBookFlight = new javax.swing.JButton();
        jButtonBestFlightsBack = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 204));

        jTableSearchManage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airline Company", "Flight Number", "Source", "Destination", "From Time", "To Time", "Available Seats", "Window Available", "Aisle Available", "Middle Available", "Price Window", "Price Aisle", "Price Middle", "Ratings"
            }
        ));
        jScrollPane1.setViewportView(jTableSearchManage);

        jButtonOneBest.setBackground(new java.awt.Color(0, 0, 0));
        jButtonOneBest.setForeground(new java.awt.Color(255, 255, 255));
        jButtonOneBest.setText("Click  to see Best Flight");
        jButtonOneBest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOneBestActionPerformed(evt);
            }
        });

        jButtonOrderlyBest.setBackground(new java.awt.Color(0, 0, 0));
        jButtonOrderlyBest.setForeground(new java.awt.Color(255, 255, 255));
        jButtonOrderlyBest.setText("Click to see Best Flights in Ascending order");
        jButtonOrderlyBest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrderlyBestActionPerformed(evt);
            }
        });

        jTextFieldBestFlightFrom.setText("                   ");

        jLabel2.setText("to");

        jButtonNextBookFlight.setBackground(new java.awt.Color(0, 0, 0));
        jButtonNextBookFlight.setForeground(new java.awt.Color(255, 255, 255));
        jButtonNextBookFlight.setText("Book your Flight >>>>>>>");
        jButtonNextBookFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextBookFlightActionPerformed(evt);
            }
        });

        jButtonBestFlightsBack.setBackground(new java.awt.Color(0, 0, 0));
        jButtonBestFlightsBack.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBestFlightsBack.setText("<< Back");
        jButtonBestFlightsBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBestFlightsBackActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel7.setText("Customer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonBestFlightsBack)
                                    .addComponent(jButtonNextBookFlight)
                                    .addComponent(jButtonOneBest)
                                    .addComponent(jButtonOrderlyBest)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldBestFlightFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldBestFlightTo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldBestFlightFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jButtonOrderlyBest)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOneBest)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNextBookFlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBestFlightsBack))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextFieldBestFlightTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOneBestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOneBestActionPerformed
        // TODO add your handling code here:
                String fromSearchBest=jTextFieldBestFlightFrom.getText();
        String toSearchBest=jTextFieldBestFlightTo.getText();
        
        if((!jTextFieldBestFlightFrom.getText().equals("")) && (!jTextFieldBestFlightTo.getText().equals("")))
        {
        searchResultList=new ArrayList();
        for (Airplane airplanes_lst : travelAgencyObj.getAirplaneCompany()) {
            
            if(fromSearchBest.equalsIgnoreCase(airplanes_lst.getSourcePlace()) &&(toSearchBest.equalsIgnoreCase(airplanes_lst.getDestinationPlace())))
            {
                searchResultList.add(airplanes_lst);
            }
        }
             Collections.sort(searchResultList, Collections.reverseOrder(new Comparator<Airplane>(){
            public int compare(Airplane first ,Airplane second){
             return Integer.compare(first.getRatings(), second.getRatings());
            }
        }));


        oneBestFlightTable();
        JOptionPane.showMessageDialog(null,"First Available flight is displayed in above Grid.");
        }
        else
        {
          searchResultList=new ArrayList();
        for (Airplane airplanes_lst : travelAgencyObj.getAirplaneCompany()) {
                searchResultList.add(airplanes_lst);
        }
            Collections.sort(searchResultList, Collections.reverseOrder(new Comparator<Airplane>(){
            public int compare(Airplane first ,Airplane second){
             return Integer.compare(first.getRatings(), second.getRatings());
            }
        }));

        oneBestFlightTable();
        JOptionPane.showMessageDialog(null,"First Available flight is displayed in above Grid.");   
        }
        
        
        
    }//GEN-LAST:event_jButtonOneBestActionPerformed

    private void jButtonOrderlyBestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrderlyBestActionPerformed
        // TODO add your handling code here:
        
        String fromSearchBest=jTextFieldBestFlightFrom.getText();
        String toSearchBest=jTextFieldBestFlightTo.getText();
        
        if((!jTextFieldBestFlightFrom.getText().equals("")) && (!jTextFieldBestFlightTo.getText().equals("")))
        {
        searchResultList=new ArrayList();
        for (Airplane airplanes_lst : travelAgencyObj.getAirplaneCompany()) {
            
            if(fromSearchBest.equalsIgnoreCase(airplanes_lst.getSourcePlace()) &&(toSearchBest.equalsIgnoreCase(airplanes_lst.getDestinationPlace())))
            {
                searchResultList.add(airplanes_lst);
            }
        }
             Collections.sort(searchResultList, Collections.reverseOrder(new Comparator<Airplane>(){
            public int compare(Airplane first ,Airplane second){
             return Integer.compare(first.getRatings(), second.getRatings());
            }
        }));


        bestFlightTable();
        JOptionPane.showMessageDialog(null,"First Available flight is displayed in above Grid.");
        }
        else
        {
          searchResultList=new ArrayList();
        for (Airplane airplanes_lst : travelAgencyObj.getAirplaneCompany()) {
                searchResultList.add(airplanes_lst);
        }
            Collections.sort(searchResultList, Collections.reverseOrder(new Comparator<Airplane>(){
            public int compare(Airplane first ,Airplane second){
             return Integer.compare(first.getRatings(), second.getRatings());
            }
        }));

         bestFlightTable();
        JOptionPane.showMessageDialog(null,"First Available flight is displayed in above Grid.");   
        }
        
//        searchResultList=new ArrayList();
//        for (Airplane airplanes_lst : travelAgencyObj.getAirplaneCompany()) {
//            
//           
//                searchResultList.add(airplanes_lst);
//          
//        }
//           Collections.sort(searchResultList, Collections.reverseOrder(new Comparator<Airplane>(){
//            public int compare(Airplane first ,Airplane second){
//             return Integer.compare(first.getRatings(), second.getRatings());
//            }
//        }));
//
//        bestFlightTable();
        
    }//GEN-LAST:event_jButtonOrderlyBestActionPerformed

    private void jButtonNextBookFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextBookFlightActionPerformed
        // TODO add your handling code here:
        int selectedRow=jTableSearchManage.getSelectedRow();
        if(selectedRow<0)
        {
              JOptionPane.showMessageDialog(null, "Please select a row from the table shown.","Warning",JOptionPane.WARNING_MESSAGE);
        }
         else{
            
        Airplane airways=(Airplane) jTableSearchManage.getValueAt(selectedRow, 0);
        BookFlightJPanel panel=new BookFlightJPanel(jPanelBody,airways,travelAgencyObj);
        jPanelBody.add("BookFlightJPanel",panel);
        CardLayout layout=(CardLayout) jPanelBody.getLayout();
        layout.next(jPanelBody);
        }
    }//GEN-LAST:event_jButtonNextBookFlightActionPerformed

    private void jButtonBestFlightsBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBestFlightsBackActionPerformed
        // TODO add your handling code here:
             jPanelBody.remove(this);
        CardLayout layout=(CardLayout) jPanelBody.getLayout();
        layout.previous(jPanelBody);
    }//GEN-LAST:event_jButtonBestFlightsBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBestFlightsBack;
    private javax.swing.JButton jButtonNextBookFlight;
    private javax.swing.JButton jButtonOneBest;
    private javax.swing.JButton jButtonOrderlyBest;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSearchManage;
    private javax.swing.JTextField jTextFieldBestFlightFrom;
    private javax.swing.JTextField jTextFieldBestFlightTo;
    // End of variables declaration//GEN-END:variables
}
